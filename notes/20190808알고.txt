//마이쮸는 2번이 답이다.

polymorphism 활용
	<리스트>중복가능, 순서를 가짐
순차리스트(ArrayList) : 인덱스가 있음(배열 기반 리스트)
			중간에 삽입/삭제 할때 다른 인덱스의 값들을 옮기고 넣어야 하므로 속도가 떨어짐
연결리스트(LinkedList) : 개별적으로 있는 원소의 주소를 연결, 링크를 통해 접근 -> 물리적인 순서 맞출 필요X, 메모리의 효율적인 사용가능
	참고)insert:앞에추가addtoFirst,  append:뒤에추가addtoLast
		어렵지만 모든 자료구조 표현가능(B형 시험에 사용하기 좋음)-Stack,(Priority)Queue
			 

	<연결리스트> isFull체크 필요없어짐
노드:하나의 원소(Data+Link)
	엔드 노드의 Link에는 null이 들어간다~!
	temp(헤드는 그대로 두고 temp에 넣음)가 가르키는 주소가 null이 아닐경우 그 주소값을 계속 따라가서 순회하거나 마지막 노드를 찾을 수 있음!!!!
헤드:리스트의 처음 노드를 가리키는 레퍼런스
	
	<삽입Insertion Sort>도서관 책정리
2중루프
enQueue할때 insertion sort하면 priority Queue가 된다.

	<병합Merge Sort>(divide&conquer해서 정렬된 자료 집합을 병합)
1.분할 2.정렬 3.병합