서버가 MVC와 REST 두개를 돌린다~
스프링 MVC 프로젝트로 생성, jackson과 (Tx처리하는 거 빼서)4가지 dependency 추가, 스프링은 4.점대 (너무 최근거는 X)
"chrome postman" 앱추가!! : REST Client Tool -> 4가지 메서드 테스트
	POST할 때 Body에 raw 및 JSON 설정으로 입력해서 요청전달한다.

1. 컨트롤러 작성
2. db관련 패키지 가져오기
3. postman이나 swagger등으로 결과를 확인한다.

	<Spring REST API> REpresentational State Transfer = 분산 네트워크 프로그래밍의 아키텍처 스타일
			http request
Client			<--->(인터넷)	WebServer     <->       DB
(브라우저/스마트폰		xml/json
 등등 다양함)
			    |
p.119 서버와 클라이언트 간 상호작용은 일관된 인터페이스들 위에서 이뤄져야 한다.
	다양한 클라이언트에 작용할 수 있도록 서버쪽에서 jsp 등 "View를 따로 만들지 않는다!!"
		-> 서버에서 response가 나갈때 View가 아니고 xml/json 등 "Data가 직접 담겨서 나간다!!!!" ("원래는 jsp가" HTTP Response body에 담겨서 나감. )
			-> 클라이언트 쪽에서 화면을 만들어서 보여줌!!

//오픈 api등에서 많이 활용(기상청 서버에서 data를 받아와서 클라이언트에서 뿌림)

>> HTTP "Resoure uri(제어할 리소스 표시)" 그리고 HTTP "Method(Get/Post/Put/Delete 등 그 리소스로 뭘 할건지)" 2가지를 통해 요청을 보내는 방식!!!!
				ㄴ"Get: Select / Post: Insert / Put: Update or Create / Delete: Delete"

		Resource URI	HTTP Method
selectAll 		/customers	GET
selectOne	/customers/{num}	GET
insert		/customers	POST
update		/customers	PUT
delete		/customers/{num}	DELETE
{num} 안의 num은 파라메터의 @PathVariable num 으로 받아서 사용!!!

//원래 uri는 액션을 나타냈고 ?뒤에 파라메터를 전달하였다. 

규칙 4가지(p.120)>
	1.리소스 식별
	2.표현을 통한 리소스 처리
	3.
	4.

	<JSON> =js의 객체!
키-밸류 쌍 / 밸류의 리스트 방식 2가지
json <-> 자바객체 변환 (jackson 디펜던시 활용) 
	(자바객체 <-> Relational 변환 (myBatis 활용))



	<JSON> - 자바스크립트에서 객체 표현
텍스트 기반의 경량 데이터 변환 포멧
1. 배열구조 [value, ,,,]
2. 컬렉션데이터구조 {"key":value,,,,} 
	key는 항상 "string문자열" : value는 JSON데이터 -> 2중 컬렉션 데이터 구조 가능

////eval("")은 ""를 떼고 안에것을 적용시키는 함수!
var x = eval("("+ {  JSON형식의 데이터 key:val, key:val } +")");  //배열형식인 경우 ()를 붙이지 않아도 됨
		->JSON형식의 (문자열) 데이터를 자바스크립트 "JSON 객체 x"로 변환
		x['key'] 또는 x.key로 키를 통해 JSON데이터에 access할 수있다.
		둘의 차이)
		var y = 'name';일 때 x[y]는 키가 'name'인것을 찾지만 x.y는 키가 y인것을 찾는다!! ([]는 변수처리가 되지만 .뒤에는 변수가 아니고 그냥 바로 key가 와야함)
-------------jackson
<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl -->
<dependency>
	<groupId>org.codehaus.jackson</groupId>
	<artifactId>jackson-mapper-asl</artifactId>
	<version>1.9.13</version>
</dependency>
------------
어노테이션>
"컨트롤러에 @RestController" (= @Controller + @ResponseBody) : 자바 객체를 응답의 Body에 바로 넣어보냄
요청 처리 메서드에 @RequestMapping

@RequestBody : xml/json -> java vo 객체 (클라이언트에서 서버로 요청이 들어올 때 수신) HTTP Request body
@ResponseBody : java vo 객체 -> xml/json (서버에서 클라이언트로 응답이 나갈 때 송신) HTTP Response body

//클라이언트에서는 ajax통신으로 서비스 호출