	<Vue의 directive>
v-on:  은 @ 와 같다. (이벤트 핸들러 역할)
v-bind: 은 : 와 같다.
v-model:은 양방향 연결
v-if와 v-show의 차이점은 소스에서 주석인지 display:none인지
v-for="json in json_arr" 등으로 하나씩 꺼내서 반복적으로 생김!!

//시험: v-pre:는 {{}}등을 데이터 치환하지 않고 그대로 출력하도록 만듬
         v-cloak: js가 완전히 실행되기 전에 다른 출력값이 출력되는 것을 display:none등으로 가려서 방지함

CSS>
1. class="클래스이름" 속성으로 CSS에서 사용
2. v-bind:class="{클래스이름: 보일지(참)/안보일지(거짓)}" 속성 사용
(같이 사용할 수도 있음)


BootRestMVCProject의 @RestController위에 
@CrossOrigin("*") 어노테이션을 붙임 //(Cross Origin Resource Sharing에서 발생하는 문제를 해결하기 위해)

일단 Server에서 html을 받아옴.
	->원래는 그 server의 그 port에 Ajax요청을 해서 받아온다.(port가 달라도 다른것으로 인식)

LiveServer(localhost:5500)에서 html을 받아오고 Rest의 TomcatServer(localhost:9090)에 데이터를 요청해 받아와서 뿌린다.
	        ->	1. client쪽에서 다른서버에서 오더라도 뿌려주게 설정 
		2. server쪽에서 어떤 client에서 요청이 들어와도 다 응답을 하게 보안 설정 -> @CrossOrigin("*") 사용

axios (js라이브러리)를 활용해서 Rest서버에 비동기요청을 보냄
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>


--------------
	<JavaScript(=ECMA Script)>
ES5버전 -> 2015년의 ES6버전으로 프로젝트를 만든다. (사용자 브라우저에 맞도록 ES5로 변환해주는 컴파일러 = Babel ) https://babeljs.io/
		"=>(화살표함수)"등을 사용가능. 
			function키워드없이, 간단하게 "(파라메터)=>리턴값;꼴로 익명함수"를 작성
							       ㄴ리턴값 대신 {return 리턴값;}로 적어도 됨. 리턴값은 json객체 등 ex) {return {num:123, code:999}}
		;를 붙여주는게 좋다
함수자체가 객체로 인식이 되기 때문에 "파라메터나 리턴값"으로 함수 전달 가능!
	var x = (function(){ });  ?일 때  x();하면 저 익명함수가 실행됨

//axios에서 =>사용해보았다