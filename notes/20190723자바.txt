부모타입>자식타입

<다형성> 생성한 객체에 대해 다양한 타입의 레퍼런스가 사용될 수 있음(상속관계가 존재하는 한!)
	Child x = new Child();
	Parent x 
	Object x
	->상위 타입의 배열 만들어서 그 배열 안에 하위 타입의 데이터를 넣을 수 있다. -> 또한 그 원소를 명시적으로 하위 타입으로 형변환이 가능하다!!!! 

자식은 부모타입이다!!!!!
Parent y = P;
	  C;
자식 생성자안의 super()는 부모의 생성자로 파라메터 전달한다.

	추상(미완성=Abstract) 앞에 <abstract 수식어>를 붙여주어야한다~
추상 메서드 : {body}부분이 없는 메서드
추상 클래스 : 추상메서드가 포함된 클래스
		"생성new불가", 자식 클래스가 상속받아서 미완성 메서드를 구현해야함! - 마우스 올려서 간단히 오버라이드 세팅 할 수있음
		추상메서드가 없더라도 생성불가시키기 위해 쓰기도함		
쓰는 이유)메서드를 상속해줘봤자 자식이 바꿔써야 하므로 메서드 이름만 정해놓는 개념 
	
	
<상속>
1. 구현상속
	부모클래스에서 구체적인(구현된) 메소드를 물려주는 것
2. 타입상속(자식도 부모타입으로 됨, 타입만 물려준다.)
	부모클래스에서 "추상"메소드를 물려주는 것
	-추상클래스, 인터페이스(추상메서드로"만" 이루어짐!) 등

<인터페이스> - 만들때 class가 아닌 Interface
추상 메서드로만 이루어진 추상클래스(따라서 생성불가), 내부에 abstract생략 가능
자식 클래스가 상속받아서 미완성 메서드를 구현해야함
"다중상속 지원"
"자식클래스 implements 부모인터페이스" -> 자식은 부모인터페이스타입이다~

인터페이스 안의 메소드는 기본으로 public, abstract이고 필드는 기본으로 static, final이다!!

<final 수식어>
final class : 상속 불가(마지막 자손) ex)Math 클래스, String 클래스
final method : 오버라이딩 불가
final 멤버필드(변수) : 값 변경 불가(상수) - 처음 대입은 가능

<static 수식어>
객체들 간에 공유되는 유일한 값(Class Area에 유일하게 있고 객체들이 heap에서 참조)
"객체 생성 없이" "클래스 이름으로 사용"!!!!-메소드 호출 및 데이터 사용 ex)Math.PI
//객체가 heap에 생성되는 것은 파일이 run되서 main이 돌때이지만, static은 실행 전 컴파일이 끝나고 CA에 클래스 정보가 등록되면서 이미 생성된다!!

멤버필드, 메소드, 블록에 사용

this, super들은 static method안에서 사용불가.(저 둘은 컴파일후 실행을 해서 heap에 객체생성 되어야 사용할 수 있다.)

main등 static method는 클래스이름.메소드이름(); 으로 호출한다!!
javac Hello.java > (Hello.class) > java Hello (클래스파일 안의 main을 실행)

static 블록은 main보다 먼저 실행된다.

참고)Source - Organize imports로 빠르게 import를 해줄 수 있다.
	다른 패키지의 클래스에 접근할 때 써주어야 한다. 

<접근 제한자(Access Modifier)>
	접근 범위가 아래로 갈 수록 좁아짐
1. public : 어디서든 접근 가능
2. protected : 패키지가 달라도 "상속관계가 있는 클래스"에서는 접근 가능
3. (default) : 같은 패키지에서만 접근 가능. package 지정자라고도 부름~
4. private : "오직 클래스내부에서만" 사용 가능
	생성자가 private이면 다른곳에서 생성불가

