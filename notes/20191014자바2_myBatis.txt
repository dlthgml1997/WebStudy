시험>
1. Driver 로딩
2. Connection 생성
3. Statement 생성
4. Query 실행
	1)실행할 query가 Select문인 경우 : stmt.executeQuery(query);
	2)아닌경우 : stmt.executeUpate(query);  //insert, delete, update, create table등 모두
5. Query 실행 결과 처리
	1)실행된 query가 Select문인 경우 : "ResultSet(RS, 결과집합) 타입"을 리턴!!
	2)아닌경우 : Query실행후 영향을 받은 "레코드 갯수(int 타입)" 리턴
	3)둘다 가능한 : boolean flag = stmt.execute(query); //query가 select면 true 아니면 false가 리턴
		if(flag){
			ResultSet rs = stmt.getResultSet(); //1)
		}else{
			int rows = stmt.getUpdateCount(); //2)
		} 	
6. 마무리

	<Framework> 반제품(멀티스레드 동기화 처리, 보안 등 주요 기능을 미리 만들어 논 것)
jQuery(js fw)
BootStrap(css, js fw)
myBatis(DB fw) : 위 JDBC 6단계를 알아서 해주므로 제공하는 api를 활용만 하면 된다. - mybatis.jar
hibernate(완벽한 ORM fw) : 쿼리문은 사용못하고 자바 객체만 사용
Spring

	<MyBatis> 고성능의 persistance framework. ORM(=Object(java)-Relation(DB table) Mapping) framework
다양한 SQL문장, 저장 프로시저(=DB쪽의 메소드 같은것, DB쪽에 저장된 쿼리문), 고급 맵핑 기능 지원
거의 모든 JDBC코드를 대신함
SQL Mapping : java의 VO객체"object1개"와 DBtable의 "record1개"가 정확히 매핑됨 -> VO객체를 생성(new)/제거(null)/수정하면 record가 생성(insert)/제거(delete)/update됨

App(Java)
|
myBatis 설정파일	    -----------	Mapper 파일 : "SQL쿼리문"이 들어있는 파일
(Configuration.xml)			(Customer.xml)
|
DB

Configuration.xml 설정파일 : 
	1. Alias지정(vo객체에 별칭 설정)
	2. 환경 세팅(db 정보 제공)
	3. Mapper 파일의 경로
매퍼 파일 : 실행 할 쿼리 문을 저장하는 파일. 테이블 하나당 한개씩 작성
	ㄴnamespace태그: 작업하는 "테이블들을 구분"해주기 위한 식별자

ResultMap> select후의 결과 처리를 위해 정의
SqlSession메소드에서 Mapper file의 ResultMap정의에 따라
1. (type 속성의) VO생성 -> 디폴트 생성자 사용
2. vo의 필드에 값 set - > property 속성 이름 기준으로 setter사용
3. List에 담아서 return해줌 -> while(rs.next())

SQL문태그에서 parameterType 속성이 VO인 경우 #{}안의 이름 기준으로 getter사용!!

	<SqlSession>
1. SqlSessionFactoryBuilder 클래스 : 2.를 생성하는 클래스
|
v
2. SqlSessionFactory 클래스 : 3.을 필요할 때 계속 생성하는 클래스
|
v
3. *"SqlSession" 클래스 : "Mapper XML"에 등록된 SQL을 실행하기 위해 API 를 제공. (이 객체가 있어야 메소드를 사용 가능.)
	public Object selectOne(String stmt, Object param) : 하나의 데이터를 검색, 두개 이상 리턴되면 예외 발생
	public List selectList(String stmt, Object param) : 여러 개의 데이터를 검색
	public int insert(String stmt, Object param) : 몇 건 삽입했는지 리턴
	public int update(String stmt, Object param) : 몇 건 갱신했는지 리턴
	public int delete(String stmt, Object param) : 몇 건 삭제했는지 리턴

	<myBatisProject2>
client
Customer App  <------	   ICustomer
main()			      |
	         ------>	  *CustomerDAO    <----SqlSession객체---- 	myBatisUtil
	         요청	      |					  ^ 
			      v					   |
			     DB					myBatis 환경설정파일
								  ^
								   |
								Mapper 파일

시험> mymvcDBproject
0. 프로젝트 import
1. context root 체크 : MyMVCDB
2.web.xml 열어서 
http://localhost:8080/MyMVCDB/main.do

client에서 main.do로 request가 들어오면
"Controller"에서
1. DAO객체 생성해서 DB작업
2. 결과를 req에 저장
3. view(jsp)로 forward