DB의 정의>
1.통합된 데이터의 집합
	통제된 중복(minimal/controlled redundancy)
2.저장된 데이터
3.운영데이터
	운영을 위해 반드시 유지해야 할 데이터의 집합
4.공용데이터
DB의 특징>
1.리얼타임
2.계속 변화
3.동시공용
4.내용에 따른 참조(Content Reference)
	데이터 레코드의 주소/위치가 아닌 값에 따라 참조
구축목적 8가지>
1."일관성"
	최소한의 중복만 허용
2."무결성"
3.논리적/물리적 독립성(Independency)
	프로그램과 데이터 사이에 서로 영향을 최소화(DB 구조에서 DB쪽 스키마가 바뀌어도 바깥쪽의 구조가 바뀌는 것을 최소화)
		논리적 : 개념스키마의 내용이 변동되더라도 외부 스키마에 영향을 주지 않는 것
		물리적 : 내부스키마가 변동되더라도 개념스키마에 영향을 주지 않는 것
4.보안
5.표준화
			<DB 운영 환경>
	DBA(=관리자)	응용프로그래머		최종사용자		->1.Users(+JDBC등의 프로그램) 
		  |_		|	     	 _|
			User Interface
			        |
	CASE 도구	        |			응용프로그램
			        |
			DBMS(=DB 관리 시스템)	
	Dictionary				DB

+DDL,DML,DCL등의 DB언어(SQL)

	<3단계 DB 구조> - 설계할 때 본다.
										최종사용자  최종사용자  최종사용자 ...
1.외부스키마 : 최종사용자의 관점을 각각 추상적으로 모델링 한 것(사용자에 대응)		외부스키마  외부스키마  외부스키마 ...
2.개념스키마(=스키마) : 모든 외부 스키마가 생성되고 지원. 전체적인 논리 구조. DB종류(관계형 등)		   개념스키마
3.내부스키마 : 개념스키마의 물리적 저장구조에 대한 정의(특정 제품-오라클 등)		    	    내부스키마
										       	         DB

DB 저장 구조>
DB > Tablespace > Segment > Extent > Block(읽기 및 쓰기의 최소 단위)


	<DB 생명 주기>
요구사항 분석 -> "<설계(=데이터 모델링)>" -> 구현(툴 사용) -> 운영 -> 감시 및 개선
		1.개념 설계 : ERD를 도출
		2.논리 설계 : Table(ERD 상세화하고 DB종류(관계형) 등 결정)
		3.물리 설계 : 정규화(테이블 나누기) 및 반정규화(테이블 합치기) > DDL을 기술
1.사용자의 관점. 데이터의 저장은 나타내지X. 엔티티-관계 데이터 모델
	DB 요구사항 -> 엔티티 추출 -> 엔티티 간 관계 -> 애트리뷰트 추출 -> ERD
2.실제로 저장될 수 있는 구조. 계층, 네트워크, 관계, 객체지향 데이터 모델
	관계형 스키마 작성 : ERD -> 엔티티의 변환(테이블) -> 관계의 변환 ->애트리뷰트의 변환(컬럼, 밑줄은 PK로) -> 관계형 스키마
						         ㄴ카디날리티에 따른 변환
							1:1은 한쪽의 pk를 다른 쪽의 fk로 가져간다.
							1:N은 1쪽의 pk를  N쪽의 fk로 가져옴.
							M:N은 관계를 위한 테이블을 새로 만든다. 그리고 이 테이블에 양쪽 각각의 pk를 fk로 가져옴.
			  값의 집합은 domain으로 변환
3.컴퓨터의 관점. 레코드 형식/순서/접근 경로 같은 정보

	<관계형 DB단위> : Field -> Record -> Table(=릴레이션)
domain : 애트리뷰트가 취할 수 잇는 같은 타입의 원자 값(값1개)들의 집합 - 자료형이랑 비슷한 뜻인 듯
<Key>
수퍼 : "한 투플을 유일하게 식별"할 수 있는 속성(또는 속성의 집합) = 유일성 -> "유일성"은 만족 / "최소성"은 만족하지 못함 (ex)사람의 주민번호와 여권번호)
후보
대체
기본
외래(FK)
