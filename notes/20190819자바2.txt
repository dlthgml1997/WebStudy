-- transaction(=Tx) : 하나의 단위로 묶여서 실행되어야 하는 작업단위 -> all or nothing
	ex)출금&입금(update문 2개가 묶여있음), DML중 select제외한 update/insert/delete

(auto commit transaction 설정 체크 되있으면 자동 커밋)

	<JDBC API>
자바 프로그램이 (port3306으로) 소켓을 통해서 클라이언트로써 DB(서버역할)와 통신(네트워크로 원격 연결)
java.sql
javax.sql     
//주로 클래스보다 interface위주로 되어있음(by Sun, JDK안에 있음)
		//-> "implements하는 Class들"을 각 DB회사(DB Vendor)에서 만들어 놓음(="드라이버!") 
		//(MySQL드라이버를 설치)
		//-> interface의 메서드를 골라서 호출하여 Java프로그램 작성

<*JDBC 프로그래밍 순서>꼭 순서대로
	1. Driver 로드(등록)
		DB에 맞는 Driver를 등록
	2. Connection 생성
		사용하려는 DB에 Network 연결~
	3. Statement 생성 : 2.를 가지고 3.을 생성
		Query한개를 담을 수 있는 "그릇", Connection을 통해 쿼리 전달
	4. *Query실행 : 3.에 생성된것으로 4.를 실행
		쿼리를 2가지 Statement에 담아서 Connection을 통해 DB로 전송
			1)실행할 query가 Select문인 경우 : stmt.executeQuery(query);
			2)아닌경우 : stmt.executeUpate(query);  //insert, delete, update, create table등 모두
	5. *Query실행 결과처리
		쿼리의 결과를 처리
			1)실행된 query가 Select문인 경우 : "ResultSet(RS, 결과집합) 타입"을 리턴!!

				ResultSet rs = stmt.executeQuery(query); //rs 레퍼런스는 받은 테이블 제목줄을 가르킨다.
				while(rs.next()==true){ //rs에서 한행 내려왔을 때 데이터가 있는 경우 계속 실행
					String x = rs.getString(n);  //x는 지금 행에서 n열의 데이터
					String y = rs.getString("컬럼이름");  //좀더 느린 방법
				}
				rs.previous(); rs.first(); rs.last(); rs.absolute(원하는행위치); ....(DB에 따라 클래스에 메서드를 구현 안해놓은 경우도 있다.)
			2)아닌경우 : Query실행후 영향을 받은 "레코드 갯수(int 타입)" 리턴
				int x = stmt.executeUpate(query);   //x개의 레코드가 영향을 받았다.
	6. 마무리
		stmt.close();
		rs.close();
		con.close(); //얜 필수(socket닫는것처럼)
------------------------------------------------------------------------------------
)https://dev.mysql.com/ -> mysql downloads(Connector/J) ->Platform Independent ->아래꺼
Build Path -> Add External JARs해서 드라이버를 넣기

)Run Config - 클래스지정 - Arguments : string prompt 
------------------------------------------------------------------------------------
Statement : DB에 갈때마다 컴파일 실행
^
^
PreparedStatement : 실행할 쿼리문의 일부가 미리 담겨있는 그릇
^	-"DB쪽에서" 맨 처음 받았을 때 컴파일을 해서 메모리에 올려놓고, 같은 PreparedStatement가 에 쿼리가 담겨 왔을 때 또 컴파일하지 않고 값만 바꿔서 실행
^		-> 속도가 빨라짐, 따옴표귀찮은게 사라짐
^	-파일의 "바이너리 데이터"를 스트림을 통해 읽어서 컬럼에 insert하는 "메서드" 등을 포함
CallableStatement : 실행 Query문이 이미 DB안에 내장되어 있음
	-DB에 저장된 Query문을 호출, 파라메터만 전달

			멀티 tier					2-tier(보안상의 문제)

		Java-main()/Browser등: client
		|
		|--------->레코드 1건의 정보를 저장하기 위한 객체 : VO(Value Object)
		|
		Java: server					Java-main(): client			-------->DAO(Data Access Object) : DB에 접근해서 CRUD등 작업
		|						|
		<JDBC>						<JDBC>					
		|						|	
		DB						DB: server

3-tier에서 필요한 것 작성 순서>
1. vo - customer table 안의 레코드 1건(Customer)의 정보를 저장하기 위한 객체
2. interface - dao가 구현해야 되는 메소드 목록을 가지고 있는 인터페이스
3. dao 
4. client program(main 메소드를 가진 객체) : dao를 new생성

						
				