	<MVC패턴>

Model(logic, data처리) : db에 접속해서 작업. POJO로 작성(=그냥 자바파일)

View(presentation) : 화면에 데이터 뿌림. JSP로 작성

Controller : client의 요청 받기 -> Model -> View (forward로 전달)
      ㄴServlet하나 	또는 	Filter(Front Controller)+POJO(그냥 controller)=필터에서 필요한 부분 pojo의 서비스메소드로 전달

		<기본구조>*
          request
client 	--->	"Controller"	 --->	"Model"
(html)	<---	(Servlet) 	          forward	(POJO)
          response	   |		<---	DAO      <->    DB	
		   |			^
		   |forward		VO
		   v			(POJO)
		  "View"			
		  (JSP)

http://localhost:8080/customer/list.cus  : 클라이언트가 할 요청
         서버:port/Context_Root/Servlet_Path

Context Root는 프로젝트의 Web Project Settings 또는 Servers의 server.xml에서 확인 가능
Context Root뒤의 /가 context

백엔드시과목평가는 소스코드 -> 객관식 

//req.getParameter()
  req.get또는setAttribute() : 이 req는 추가되는 부분

	<MVC 프로젝트 작업순서>
V 1. Dynamic web Project 생성(web.xml 체크박스체크)
V 2. WEB-INF/lib안에 jar파일 3개(mysql, jstl)
V 3. package 생성(filter, controller, vo, dao)
V 4. WebContent 아래에 view 폴더 생성
V 5. 생성시 또는 web project세팅에서 context_root 변경 -> Servers의 server.xml에서 path가 제대로 바뀌었는지 확인!
V 6. web.xml 또는 Annotation 중 한가지 방식으로 filter설정 (url-pattern값 설정) 	ex) *.cus

	<게시판 요청 url>
V1.초기화면(게시글목록): http://localhost:8080/board/list.bod
:게시판 목록 화면(list.jsp) 

V2.상세화면(글읽기): http://localhost:8080/board/read.bod
:선택된 글의 모든 정보(비밀번호 제외) 출력. (read.jsp)  			V 글읽으면 조회수 증가!!

V3.새글등록화면(입력폼): http://localhost:8080/board/insertForm.bod
:입력화면(insertForm.jsp)

V4.새글등록처리(DB에 INSERT): http://localhost:8080/board/insertProcess.bod
:새글 등록 확인 화면(insertSuccess.jsp)

V5.검색(검색기준-글제목 or 글쓴이): http://localhost:8080/board/search.bod
:검색 결과 화면(데이터 없는 경우 메세지. search.jsp)

V6.글삭제: http://localhost:8080/board/delete.bod
:삭제 후 초기화면으로 돌아오기
