설정>
"Spring Starter Project" 생성
Group과 Package 이름 수정
DeveloperTools의 SpringBootDevTools 등 필요한 것들 체크하기!!!(없는 디펜던시는 pom.xml에서 직접 추가하면 된다)
	5가지 체크박스 이미지파일로 캡쳐해둠
pom.xml에 <properties>에 <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>로 버전 지정  -> Maven에서 Update Project

패키지 아래에 @SpringBootApplication가 붙은 "프로젝트Application 자바 클래스"가 있다. = "부트 스트랩 클래스"!!!
	ㄴ실행 시 콘솔에서 포트번호, 컨텍스트 루트(/)등을 확인할 수 있다!! 서버가 실행되는 것!!

//@SpringBootApplication = @Configuration + @ComponentScan + @EnableAutoConfiguration 등
//		@Configuration : "spring 설정 정보"를 가지고 있는 자바 클래스. "xml" 문서를 대신함!!
//		@ComponentScan : 뒤에 패키지를 지정하면 그 패키지를 뒤짐. 지정안할 경우 "이 클래스가 있는 폴더 기준으로 아래"의 "어노테이션"을 모두 스캔(@RestController, @Component, @Autowired 등)
//		@EnableAutoConfiguration : properties에서 지정해준 config.xml을 보고 Boot가 "자동으로 객체 생성"하게 해줌!!! (Factory, ds, SessionTemplate 등)

src/main/resources안에는 자바가 아닌 정적 자원들 넣기
application.properties(맵 구조) 에 환경 설정을 지정해 준다
	server.port=9090
	server.servlet.context-path=/boot : 컨텍스트 루트
	등

//application.properties에 db setting을 적으면 pool이 생성됨! factory, sessionTemplate도 자동 생성 @EnableAutoConfiguration

	<컨테이너가 객체 생성하는 방법>
1. xml만 : "생성자/Setter주입"으로 DI주입
2. 어노테이션+xml(활성화 태그) @Autowired 등
3.  java만(xml문서 대신) (SpringDI프로젝트의 JavaConfig)
	@Configuration : spring 설정 정보를 가지고 있는 자바 클래스. xml 문서를 대신함!!!
		ㄴ@Bean : 메소드 "리턴 타입의 객체가 생성"됨. <bean>태그와 동일
			 "메소드 이름"이 생성되는 "bean의 id"가 됨!!!
	=> BOOT 방식으로가면 간단해짐

p.83
디펜던시를 충돌없게 자동으로 버전관리해준다. (pom.xml에 복붙하지 않고 설정할 때 체크만해도 됨)
자동으로 처리해 주는게 많아서 빠르게 프로토타입 만드는데 사용한다.
(Legacy보다 나중에 나와서 spring framework도 5.대 버전임)
본프로젝트는 legacy로 하고 거기에 여러개의 boot프로젝트를 합쳐서 완성

"프로젝트"는 java(main함수)파일로 돌리는 Application과 		-> .jar(로컬에서 클릭하면 실행되는 압축파일)
	웹환경의 서버에서 돌리는 Web Application 2가지.	-> .war(Web App 컨테이너에서 실행되는 압축파일)
개발이 끝나면 프로젝트를 압축파일로 압축해서 실제 서버에 올린다.

Boot에서는 Web App도 서버를 포함해서 .jar로 압축해줌 
	따라서 main함수만 돌리면 서버가 실행된다.

p.100
boot은 화면에 뿌릴 때 jsp대신 Thymeleaf등 Template Engine을 권장한다. 근데 그냥 jsp사용


-----------
새로고침 안해도 페이지를 동적으로 리로딩해주는 chrome LiveReload (크롬에서 눌러서 enable해야함)
---jsp view를 사용하기 위한 디펜던시 2가지
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
---

	<스웨거> Rest Api
--postman대신 사용하는 swagger
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>
-----
@EnableSwagger2로 스웨거 설정 SwaggerConfig.java 클래스에 붙여서 활성화
@ApiOperation("메서드 위에 붙어 설명")
http://localhost:8080/swagger-ui.html 치면 지정 패키지에서 RestController찾아서 결과 뿌려줌

//BasicDataSource에서 HikariCP Pool을 쓰게 된다.