현재 "실행(동작)"중인 프로그램 = 프로세스 (작업관리자의 프로세스)

스레드는 프로세스 안에 존재해서 프로그램 "실행을 담당하는 일꾼" ex)main스레드
	프로세스 안에 스레드가 여러개 같이 있으면 멀티 스레드<->1개는 싱글 스레드
	(안티프로세스는 스레드가 안에 없어서 실행이 안됨)
실행이 안되는(main이 없는) 클래스는 main이 있는 클래스에서 가져다 사용

멀티스레드 = 동시에 실행하면서 자원 공유 -> 실행시간 단축
	장점 : CPU의 사용률 향상, 동시에 다른 일 처리 가능(응답성 향상), 자원 공유로 메모리가 절약~
	단점 : 컨텍스트 스위칭(일을 다못해도 시간이 되면 일단 저장하고 다른 스레드하던 것을 로딩해서 작업전환을 해야함), 공유데이터에 값을 읽고 쓸때 동시에 접근하면 안됨(스레드 제어의 어려움)

서버(서비스를 제공):EE는 여기를 만드는 것(백+프론트엔드), 멀티스레드로 작동 <-------> 클라이언트(서비스 이용)
1클라이언트 요청 당 1스레드를 생성-한 워드창 안에서 문서를 여러개 여는 것과 유사 (C에서는 1프로세스를 생성-워드를 새창으로 켜는 것과 유사-클라이언트요청이 많으면 응답속도가 급격히 떨어짐..)

	NEW : new Thread()
*<.start()>: 각 스레드를 따로 꼭 스타트 시켜주어야함
	RUNNABLE(=실행가능) : 스레드들이 대기Queue(FIFO)에 줄 서있는 상태
<자동>:대기하다가 실행됨 by 스레드 스케줄러
	RUNNING(=실행) : 스레드가 CPU차지(일정 시간동안 차지하고 다른스레드가 차지하게 넘겨줌)
<sleep(), wait(), join(), I/O 블록킹 등>
	대기 풀(Block) : 실행에서 일을 못끝냈을 경우 여기서 대기 하다가 대기가 끝나면 RUNNABLE로 가서 줄을 선다.
<시간종료, notify(), interrupt(), I/O종료>
	RUNNABLE
<자동>
	RUNNING
<실행완료>
	TERMINATE(죽음) : stop()으로 바로 죽일 수 있지만 사용 자제 - flag로 조건체크는 해야함
 
각 스레드가 "RUNNABLE - RUN - 대기" 사이클을 돌면서 컨텍스트 스위칭

RUNNING -> RUNNABLE : yield()메서드. 자신보다 우선순위가 같거나 높은 것이 큐에 있으면 양보하면서 줄섬

	<스레드 생성 방법!!>
1. Thread클래스					2. Runnable인터페이스(이미 extends를 하고 있는 클래스는 이 방법만 사용가능함)	
				 	|	Runnable	 ** : run()가지고 있는 인터페이스
	Thread **	      >>>>>>>>imlements>>>>>>>>^
	^				|	^implements **
	^extends	**			|	^
	^				|	Lion //Thread가 아님. Runnable 객체임(Runnable을 구현한 객체)
	Tiger				|	:void run(){thread가 해야 할 작업내용}
	:void run(){thread가 해야 할 작업내용}	

Thread에서 완성한 run()메서드는 내용이 비어있다. {  } 
	따라서 자식Tiger이 재정의 해서 내용을 넣어야함.
Lion은 implements하므로 run()을 작성해서 완성시켜야함

참고)implements도 상속이다.

스레드 스택이 메인 스레드 스택 옆에 만들어짐
	
	<동기화>
멀티스레드가 공유데이터에 접근 문제점 : 
	동시실행이 아니고 순차실행을 시켜야 함"한번에 하나의 스레드씩"= "동기화"작업(메소드 등 공유 구간에 대한 설정,lock을 건다)
							-> synchronized 수식어(공유데이터와 연관된 작업만 최소한만 넣어야 퍼포먼스가 떨어지지 않음)
	ex)num++; 	1. read 계산전의 값
			2. 연산
			3. write 계산후의 값
			따라서 겹치면 안됨

public void go(){
ArrayList<String> list;
synchronized(list){ //동기화 block, list에 lock을 건다. list에는 스레드가 순차적으로 접근 (병목현상이 생길 수 있음)
	list.add(0);
}
}

Vector, HashTable는 싱크로나이즈드 되어 있어서 멀티스레드에는 안전하나 performance 별로임 - lock이 걸려 있어서 스레드가 1개씩 접근가능함

ArrayList, HashMap등 최신 애들은 lock이 안걸려있음 - (lock이 없는애한테 걸수는 있는데 걸려있는데 풀 수는 없다.)

<네트워크> 서버와 클라이언트간 스트림을 통해서 데이터를 교환하는 프로그램
IP주소 = 컴퓨터의 랜카드의 4Byte 고유번호 -> DNS주소로 바꾸어서 사용한다. (전화번호)
포트 = 0~65535번, 각 IP의 서버에서 제공하는 서비스를 위한 작업 단위의 고유 번호 (내선번호) -> java프로그램 1개에 연결 가능
소켓 = 입력과 출력의 양 끝단, 데이터 입출력 파이프를 제공 -> Input/Output Stream

java.net패키지에서 TCP방식의 네트워크 지원

서버에 클라이언트 요청 1개당 스레드 1개
<서버 프로그램>						 	<클라이언트 프로그램>
1. ServerSocket(포트 번호)					 	2. Socket(서버 IP주소, 서버의 포트 번호) 접속요청
3. Server.accept() 접속허가 : 클라이언트2.를 기다렸다 받는 역할  
4. Socket	이 받아짐 클라이언트와 1:1통신을 담당
						5. Stream파이프
다끝나면 4,5를 close한다.