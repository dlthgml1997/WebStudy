로봇, 소금쟁이
//이퀄즈 해쉬코드가 오버라이딩 되어있어야 함?
기본데이터타입이 아니면 .equals()로 값을 비교한다. ex)String. 그런데 클래스등 비교에서는 이퀄즈가 오버라이딩 되어있는지 확인해야한다.

팁)컨트롤 쉬프트 화살표 = 드래그 선택!
)디버그는 필수!!!!(메소드를 여러개 빼놓아야함!!)

List 계열 : get, set, remove 
Set 계열, Map계열은? 모두 CRUD는 외우고 있어야함

	<Tree>비 선형
노드(최상위:루트, 말단:리프=단말노드)
	차수 : 연결된 자식노드(즉, 서브트리의) 개수 //자식노드들은 나의 서브트리의 루트
	높이 : 루트에서부터 간선(edge)의 수
트리의 차수는 max(노드차수), 트리의 높이는 max(노드높이)
간선을 쭉 이으면 조상들or자손들을 알수 있음

	<이진트리 >
이진트리는 모든노드가 1~2개
Full=Perfect : 모든 레벨 노드가 2개자식이어서 꽉찬 상태 : 최대인 (2^(n+1)-1)개의 노드
Complete : 루트1부터 x까지는 꽉차있는 상태
원래는 양단LinkedList를 이용하여 표현하지만 배열로도 표현 할수 있음(루트 1부터 이진 순서를 인덱스로 배열에 넣음) - 부모자식은 인덱스 계산으로 찾아감

	<순회>
(루트(V)기준 L(왼쪽 subtree)/R(오른쪽 subtree)과 순서)
preorder-VLR(왼쪽 짝대기), inorder-LVR(중간 짝대기), postorder-LRV(오른쪽 짝대기-visit design pattern)
//XML의 domparser?
	<수식트리> 수식을 표현하는 이진 트리(순회의 order가 fix가된다.)
피연산자는 맆노드, 말단부터 계산해서 점점 위 레벨의 연산자를 대치시키면서 올라간다.

	<이진탐색트리> 시간복잡도를 O(log n)으로 줄이기 위해
L key < 루트 key < R key : 중위순회하면 오름차순으로 정렬된 값
-순환적recursive하게 서브트리에 대해서 key값비교, 및 타고 내려감을 반복해서 "탐색"한다!!
-탐색 연산하고 실패하면 그 위치에 "삽입"
-"삭제" 양쪽 갈래가 있을 때, 가장 가까운값(오른쪽 서브트리의 최소값)을 대입하고 그값 노드는 제거
	다른 경우는 링크드리스트에서 노드 삭제 처럼 하면 된다.
	
	<힙> 완전이진트리
최대 힙 : 항상 루트노드가 최대 값인 트리 (부모키>자식키) 최대값인 루트 노드를 삭제 -> 마지막 노드를 올리고 자리바꾸기
최소 힙 : 항상 루트노드가 최소 값인 트리 
루트 노드만 삭제할 수 있다. 

////재귀호출+노드 => 전부 다룰수 있다.

성공적 공연