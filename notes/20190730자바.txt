 <Throwable 클래스>
 Error : 정도가 심한 오류
*Exception(예외) : 정도가 약한 오류. program상에서 해결=Handling=처리방법 제시 가능, 예외들 하나하나는 클래스이다.
	RunTime Exception : 실행(컴파일된 후 Run) 도중 발생
          **런타임아닌 Exception(=Checked Exception 이미 체크되어야 하는) : 컴파일 중 발생 - 실행도 못할 수도 있음
			Unhandled exception type : 익셉션 발생 가능성이 있으니 반드시 예외처리하라!! -> Surround with 트라이/캐치 클릭
 
Exception Handling(=예외 처리) 방법 -	1. 예외가 "발생한 위치에서 바로" 처리(더 자주 사용) : try~catch~finally
				2. 예외가 발생한 위치에서 "호출자(이 예외 발생 메서드를 호출한 메서드)로 예외를 전달"(throws)해서 처리

스레드 : 프로그램실행담당 일꾼
java.lang은 임포트 안해도 자동으로 되어있다~~

throw 익셉션 == (특정 상황이 될 경우)예외를 발생시킨다!! 
	Unhandled exception type이므로 예외처리 해주기

하나의 메서드는 하나의 기능만 가지게 함

부모클래스의 메서드에 "throws e" 붙어있다면 자식클래스에서 그 메서드를 오버라이딩할 때 1. 같은 익셉션 e를 그대로 throws 하거나 2. e의 자식 클래스 익셉션을 throws 하거나 3. throws를 생략하면 된다. 
따라서 자식클래스는 throws 범위가 넓어지면 안된다.(수식어와 반대)

	<I/O> 데이터의 입출력
<soure(출발지)>	------------------------	<java(destination)>
		         stream		
키보드		------------------------        모니터
메모리					메모리
파일					파일
DB					DB

pipe
I/O: 입력용(읽기용) InputStream또는Reader     
     출력용(쓰기용) OutputStream또는Writer      - 그 이름의 파일이 없으면 생성하고 씀
데이터 전송 단위 : 	byte스트림(1byte) - 영문, 숫자, 특수 <한글쓰면 깨짐>		InputStream/OutputStream
		character스트림(2byte) - 한글, 중국어 <한글 처리할 때 사용> 	Reader/Writer
처리작업:	node 스트림 - source나 destination하고 직접 연결되어서 "읽고 쓰는" 파이프
	filter 스트림(=processing 스트림=보조 스트림) - node스트림이 읽어온 데이터를 전달 받아서 "가공"하고 전달하는 파이프
							ex)Buffer 스트림으로 여러글자씩 모아서 전달, "byte타입 스트림"을 통하여 객체를 전달 

Original 	FIS 				 FOS	Copy
	->읽기				->쓰기

"스트림을 통해서 객체를 이동"시키기 위해서는 "Serialization(직렬화)"가 되어있어야 한다.
	->implements Serializable붙이면 직렬화 된다!!!  ex)스트링, ArrayList<>등	-> List안의 원소도 직렬화가 되어있어야함!!!!!
	->ArrayList<클래스>를 통째로 다루는 것이 좋다.( 안의 클래스도 직렬화시키기.)

read->작업->write